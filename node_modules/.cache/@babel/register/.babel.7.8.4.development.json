{
  "{\"sourceRoot\":\"/home/xbtwo/prod/buy-mycrypto/gatsby\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/xbtwo/prod/buy-mycrypto\",\"filename\":\"/home/xbtwo/prod/buy-mycrypto/gatsby/source-nodes.ts\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/xbtwo/prod/buy-mycrypto\",\"plugins\":[{\"key\":\"transform-typescript\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Identifier\":{\"enter\":[null]},\"RestElement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"ExportSpecifier\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"TSDeclareFunction\":{\"enter\":[null]},\"TSDeclareMethod\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"VariableDeclarator\":{\"enter\":[null]},\"TSIndexSignature\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null,null]},\"TSModuleDeclaration\":{\"enter\":[null]},\"TSInterfaceDeclaration\":{\"enter\":[null]},\"TSTypeAliasDeclaration\":{\"enter\":[null]},\"TSEnumDeclaration\":{\"enter\":[null]},\"TSImportEqualsDeclaration\":{\"enter\":[null]},\"TSExportAssignment\":{\"enter\":[null]},\"TSTypeAssertion\":{\"enter\":[null]},\"TSAsExpression\":{\"enter\":[null]},\"TSNonNullExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"TaggedTemplateExpression\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"isTSX\":false}}],\"presets\":[]}:7.8.4:development": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/xbtwo/prod/buy-mycrypto/gatsby",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/xbtwo/prod/buy-mycrypto",
      "filename": "/home/xbtwo/prod/buy-mycrypto/gatsby/source-nodes.ts",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/xbtwo/prod/buy-mycrypto",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-typescript",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Identifier": {
              "enter": [
                null
              ]
            },
            "RestElement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportSpecifier": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "TSDeclareFunction": {
              "enter": [
                null
              ]
            },
            "TSDeclareMethod": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "TSIndexSignature": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "TSModuleDeclaration": {
              "enter": [
                null
              ]
            },
            "TSInterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "TSTypeAliasDeclaration": {
              "enter": [
                null
              ]
            },
            "TSEnumDeclaration": {
              "enter": [
                null
              ]
            },
            "TSImportEqualsDeclaration": {
              "enter": [
                null
              ]
            },
            "TSExportAssignment": {
              "enter": [
                null
              ]
            },
            "TSTypeAssertion": {
              "enter": [
                null
              ]
            },
            "TSAsExpression": {
              "enter": [
                null
              ]
            },
            "TSNonNullExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "JSXOpeningElement": {
              "enter": [
                null
              ]
            },
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "isTSX": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/xbtwo/prod/buy-mycrypto/gatsby/source-nodes.ts",
        "plugins": [
          "typescript",
          "classProperties",
          "objectRestSpread"
        ]
      },
      "generatorOpts": {
        "filename": "/home/xbtwo/prod/buy-mycrypto/gatsby/source-nodes.ts",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/xbtwo/prod/buy-mycrypto/gatsby",
        "sourceFileName": "source-nodes.ts"
      }
    },
    "ast": null,
    "code": "/* tslint:disable */\nconst minimatch = require('minimatch');\n/* tslint:enable */\n\n\nmodule.exports = async ({\n  actions: {\n    createNode,\n    createParentChildLink\n  },\n  createNodeId,\n  createContentDigest,\n  getNode,\n  getNodes,\n  reporter\n}) => {\n  const nodes = getNodes();\n  const pageNodes = nodes.filter(node => node.internal.type === 'Mdx');\n  const categoryNodes = nodes.filter(node => node.internal.type === 'CategoryData');\n  /**\n   * Get a slug from a page data node.\n   *\n   * @param node {Node} The page data node to get the slug for.\n   * @return {string} The slug for the page.\n   */\n\n  const getPageSlug = node => {\n    const parent = getNode(node.parent);\n    return parent.relativePath.replace(/\\.md$/, '');\n  };\n  /**\n   * Register all pages for `categoryNode`.\n   *\n   * @param categoryNode The category to register the pages for.\n   * @return {number} The number of pages registered for the category.\n   */\n\n\n  const getPages = async categoryNode => {\n    const pageDataNodes = pageNodes.filter(node => {\n      const parent = getNode(node.parent);\n      return minimatch(parent.relativePath, `${categoryNode.slug}/*`);\n    });\n\n    for (const dataNode of pageDataNodes) {\n      const slug = getPageSlug(dataNode);\n      const {\n        frontmatter: {\n          title,\n          description,\n          priority,\n          date_published: datePublished,\n          date_modified: dateModified\n        }\n      } = dataNode;\n      const nodeData = {\n        title,\n        description,\n        priority,\n        datePublished,\n        dateModified,\n        slug\n      };\n      const node = { ...nodeData,\n        id: createNodeId(`page-${slug}`),\n        parent: categoryNode.id,\n        children: [],\n        internal: {\n          type: 'Page',\n          contentDigest: createContentDigest(nodeData),\n          owner: ''\n        }\n      };\n      await createNode(node);\n      createParentChildLink({\n        parent: categoryNode,\n        child: node\n      });\n      createParentChildLink({\n        parent: node,\n        child: dataNode\n      });\n    }\n\n    return pageDataNodes.length;\n  };\n  /**\n   * Get a slug from a category data node.\n   *\n   * @param {Node} node The category data node to get the slug for.\n   * @return {string} The slug for the category.\n   */\n\n\n  const getCategorySlug = node => {\n    const parent = getNode(node.parent);\n    return parent.relativePath.replace('/category.yml', '');\n  };\n  /**\n   * Register all categories for `pattern`.\n   *\n   * @param {Node | null} parent The parent of the category nodes.\n   * @param {string} pattern The glob pattern to get all category file nodes for.\n   */\n\n\n  const getCategories = async (parent, pattern) => {\n    const categoryDataNodes = categoryNodes.filter(node => {\n      const parentNode = getNode(node.parent);\n      return minimatch(parentNode.relativePath, pattern);\n    });\n\n    for (const dataNode of categoryDataNodes) {\n      const slug = getCategorySlug(dataNode);\n      const {\n        title,\n        icon,\n        description,\n        priority\n      } = dataNode;\n      const nodeData = {\n        title,\n        icon,\n        description,\n        priority,\n        slug,\n        isTopLevel: !parent\n      };\n      const child = { ...nodeData,\n        id: createNodeId(`category-${slug}`),\n        parent: parent ? parent.id : null,\n        // tslint:disable-line\n        children: [],\n        internal: {\n          type: 'Category',\n          contentDigest: createContentDigest(nodeData),\n          owner: ''\n        }\n      };\n      await createNode(child);\n      const pageCount = await getPages(child);\n      reporter.info(`registered new category '${slug}' with ${pageCount} pages`);\n\n      if (parent) {\n        createParentChildLink({\n          parent,\n          child\n        });\n      }\n\n      await getCategories(child, `${slug}/*/*`);\n    }\n  };\n\n  await getCategories(null, '*/*');\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "source-nodes.ts"
      ],
      "names": [
        "minimatch",
        "require",
        "module",
        "exports",
        "actions",
        "createNode",
        "createParentChildLink",
        "createNodeId",
        "createContentDigest",
        "getNode",
        "getNodes",
        "reporter",
        "nodes",
        "pageNodes",
        "filter",
        "node",
        "internal",
        "type",
        "categoryNodes",
        "getPageSlug",
        "parent",
        "relativePath",
        "replace",
        "getPages",
        "categoryNode",
        "pageDataNodes",
        "slug",
        "dataNode",
        "frontmatter",
        "title",
        "description",
        "priority",
        "date_published",
        "datePublished",
        "date_modified",
        "dateModified",
        "nodeData",
        "id",
        "children",
        "contentDigest",
        "owner",
        "child",
        "length",
        "getCategorySlug",
        "getCategories",
        "pattern",
        "categoryDataNodes",
        "parentNode",
        "icon",
        "isTopLevel",
        "pageCount",
        "info"
      ],
      "mappings": "AAEA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;AACA;;;AAYAC,MAAM,CAACC,OAAP,GAAiB,OAAO;AACtBC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GADa;AAEtBC,EAAAA,YAFsB;AAGtBC,EAAAA,mBAHsB;AAItBC,EAAAA,OAJsB;AAKtBC,EAAAA,QALsB;AAMtBC,EAAAA;AANsB,CAAP,KAOM;AACrB,QAAMC,KAAa,GAAGF,QAAQ,EAA9B;AACA,QAAMG,SAAqB,GAAGD,KAAK,CAACE,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,QAAL,CAAcC,IAAd,KAAuB,KAA5C,CAA9B;AACA,QAAMC,aAAa,GAAGN,KAAK,CAACE,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,QAAL,CAAcC,IAAd,KAAuB,cAA5C,CAAtB;AAEA;;;;;;;AAMA,QAAME,WAAW,GAAIJ,IAAD,IAAgB;AAClC,UAAMK,MAAM,GAAGX,OAAO,CAACM,IAAI,CAACK,MAAN,CAAtB;AACA,WAAOA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqC,EAArC,CAAP;AACD,GAHD;AAKA;;;;;;;;AAMA,QAAMC,QAAQ,GAAG,MAAOC,YAAP,IAA8B;AAC7C,UAAMC,aAAa,GAAGZ,SAAS,CAACC,MAAV,CAAiBC,IAAI,IAAI;AAC7C,YAAMK,MAAM,GAAGX,OAAO,CAACM,IAAI,CAACK,MAAN,CAAtB;AACA,aAAOpB,SAAS,CAACoB,MAAM,CAACC,YAAR,EAAuB,GAAEG,YAAY,CAACE,IAAK,IAA3C,CAAhB;AACD,KAHqB,CAAtB;;AAKA,SAAK,MAAMC,QAAX,IAAuBF,aAAvB,EAAsC;AACpC,YAAMC,IAAI,GAAGP,WAAW,CAACQ,QAAD,CAAxB;AACA,YAAM;AACJC,QAAAA,WAAW,EAAE;AAAEC,UAAAA,KAAF;AAASC,UAAAA,WAAT;AAAsBC,UAAAA,QAAtB;AAAgCC,UAAAA,cAAc,EAAEC,aAAhD;AAA+DC,UAAAA,aAAa,EAAEC;AAA9E;AADT,UAEFR,QAFJ;AAIA,YAAMS,QAAQ,GAAG;AACfP,QAAAA,KADe;AAEfC,QAAAA,WAFe;AAGfC,QAAAA,QAHe;AAIfE,QAAAA,aAJe;AAKfE,QAAAA,YALe;AAMfT,QAAAA;AANe,OAAjB;AASA,YAAMX,IAAU,GAAG,EACjB,GAAGqB,QADc;AAEjBC,QAAAA,EAAE,EAAE9B,YAAY,CAAE,QAAOmB,IAAK,EAAd,CAFC;AAGjBN,QAAAA,MAAM,EAAEI,YAAY,CAACa,EAHJ;AAIjBC,QAAAA,QAAQ,EAAE,EAJO;AAKjBtB,QAAAA,QAAQ,EAAE;AACRC,UAAAA,IAAI,EAAE,MADE;AAERsB,UAAAA,aAAa,EAAE/B,mBAAmB,CAAC4B,QAAD,CAF1B;AAGRI,UAAAA,KAAK,EAAE;AAHC;AALO,OAAnB;AAYA,YAAMnC,UAAU,CAACU,IAAD,CAAhB;AACAT,MAAAA,qBAAqB,CAAC;AAAEc,QAAAA,MAAM,EAAEI,YAAV;AAAwBiB,QAAAA,KAAK,EAAE1B;AAA/B,OAAD,CAArB;AACAT,MAAAA,qBAAqB,CAAC;AAAEc,QAAAA,MAAM,EAAEL,IAAV;AAAgB0B,QAAAA,KAAK,EAAEd;AAAvB,OAAD,CAArB;AACD;;AAED,WAAOF,aAAa,CAACiB,MAArB;AACD,GAvCD;AAyCA;;;;;;;;AAMA,QAAMC,eAAe,GAAI5B,IAAD,IAAgB;AACtC,UAAMK,MAAM,GAAGX,OAAO,CAACM,IAAI,CAACK,MAAN,CAAtB;AACA,WAAOA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,eAA5B,EAA6C,EAA7C,CAAP;AACD,GAHD;AAKA;;;;;;;;AAMA,QAAMsB,aAAa,GAAG,OAAOxB,MAAP,EAA4ByB,OAA5B,KAAgD;AACpE,UAAMC,iBAAiB,GAAG5B,aAAa,CAACJ,MAAd,CAAqBC,IAAI,IAAI;AACrD,YAAMgC,UAAU,GAAGtC,OAAO,CAACM,IAAI,CAACK,MAAN,CAA1B;AACA,aAAOpB,SAAS,CAAC+C,UAAU,CAAC1B,YAAZ,EAA0BwB,OAA1B,CAAhB;AACD,KAHyB,CAA1B;;AAKA,SAAK,MAAMlB,QAAX,IAAuBmB,iBAAvB,EAA0C;AACxC,YAAMpB,IAAI,GAAGiB,eAAe,CAAChB,QAAD,CAA5B;AACA,YAAM;AAAEE,QAAAA,KAAF;AAASmB,QAAAA,IAAT;AAAelB,QAAAA,WAAf;AAA4BC,QAAAA;AAA5B,UAAyCJ,QAA/C;AAEA,YAAMS,QAAQ,GAAG;AACfP,QAAAA,KADe;AAEfmB,QAAAA,IAFe;AAGflB,QAAAA,WAHe;AAIfC,QAAAA,QAJe;AAKfL,QAAAA,IALe;AAMfuB,QAAAA,UAAU,EAAE,CAAC7B;AANE,OAAjB;AASA,YAAMqB,KAAW,GAAG,EAClB,GAAGL,QADe;AAElBC,QAAAA,EAAE,EAAE9B,YAAY,CAAE,YAAWmB,IAAK,EAAlB,CAFE;AAGlBN,QAAAA,MAAM,EAAEA,MAAM,GAAGA,MAAM,CAACiB,EAAV,GAAgB,IAHZ;AAG0B;AAC5CC,QAAAA,QAAQ,EAAE,EAJQ;AAKlBtB,QAAAA,QAAQ,EAAE;AACRC,UAAAA,IAAI,EAAE,UADE;AAERsB,UAAAA,aAAa,EAAE/B,mBAAmB,CAAC4B,QAAD,CAF1B;AAGRI,UAAAA,KAAK,EAAE;AAHC;AALQ,OAApB;AAYA,YAAMnC,UAAU,CAACoC,KAAD,CAAhB;AACA,YAAMS,SAAS,GAAG,MAAM3B,QAAQ,CAACkB,KAAD,CAAhC;AACA9B,MAAAA,QAAQ,CAACwC,IAAT,CAAe,4BAA2BzB,IAAK,UAASwB,SAAU,QAAlE;;AAEA,UAAI9B,MAAJ,EAAY;AACVd,QAAAA,qBAAqB,CAAC;AACpBc,UAAAA,MADoB;AAEpBqB,UAAAA;AAFoB,SAAD,CAArB;AAID;;AAED,YAAMG,aAAa,CAACH,KAAD,EAAS,GAAEf,IAAK,MAAhB,CAAnB;AACD;AACF,GA5CD;;AA8CA,QAAMkB,aAAa,CAAC,IAAD,EAAO,KAAP,CAAnB;AACD,CAtID",
      "sourceRoot": "/home/xbtwo/prod/buy-mycrypto/gatsby",
      "sourcesContent": [
        "import { Node, SourceNodesArgs } from 'gatsby';\n\n/* tslint:disable */\nconst minimatch = require('minimatch');\n/* tslint:enable */\n\ntype PageNode = Node & {\n  frontmatter: {\n    title: string;\n    description: string;\n    priority: string;\n    date_published: string;\n    date_modified: string;\n  };\n};\n\nmodule.exports = async ({\n  actions: { createNode, createParentChildLink },\n  createNodeId,\n  createContentDigest,\n  getNode,\n  getNodes,\n  reporter\n}: SourceNodesArgs) => {\n  const nodes: Node[] = getNodes();\n  const pageNodes: PageNode[] = nodes.filter(node => node.internal.type === 'Mdx') as PageNode[];\n  const categoryNodes = nodes.filter(node => node.internal.type === 'CategoryData');\n\n  /**\n   * Get a slug from a page data node.\n   *\n   * @param node {Node} The page data node to get the slug for.\n   * @return {string} The slug for the page.\n   */\n  const getPageSlug = (node: Node) => {\n    const parent = getNode(node.parent);\n    return parent.relativePath.replace(/\\.md$/, '');\n  };\n\n  /**\n   * Register all pages for `categoryNode`.\n   *\n   * @param categoryNode The category to register the pages for.\n   * @return {number} The number of pages registered for the category.\n   */\n  const getPages = async (categoryNode: Node) => {\n    const pageDataNodes = pageNodes.filter(node => {\n      const parent = getNode(node.parent);\n      return minimatch(parent.relativePath, `${categoryNode.slug}/*`);\n    });\n\n    for (const dataNode of pageDataNodes) {\n      const slug = getPageSlug(dataNode);\n      const {\n        frontmatter: { title, description, priority, date_published: datePublished, date_modified: dateModified }\n      } = dataNode;\n\n      const nodeData = {\n        title,\n        description,\n        priority,\n        datePublished,\n        dateModified,\n        slug\n      };\n\n      const node: Node = {\n        ...nodeData,\n        id: createNodeId(`page-${slug}`),\n        parent: categoryNode.id,\n        children: [],\n        internal: {\n          type: 'Page',\n          contentDigest: createContentDigest(nodeData),\n          owner: ''\n        }\n      };\n\n      await createNode(node);\n      createParentChildLink({ parent: categoryNode, child: node });\n      createParentChildLink({ parent: node, child: dataNode });\n    }\n\n    return pageDataNodes.length;\n  };\n\n  /**\n   * Get a slug from a category data node.\n   *\n   * @param {Node} node The category data node to get the slug for.\n   * @return {string} The slug for the category.\n   */\n  const getCategorySlug = (node: Node) => {\n    const parent = getNode(node.parent);\n    return parent.relativePath.replace('/category.yml', '');\n  };\n\n  /**\n   * Register all categories for `pattern`.\n   *\n   * @param {Node | null} parent The parent of the category nodes.\n   * @param {string} pattern The glob pattern to get all category file nodes for.\n   */\n  const getCategories = async (parent: Node | null, pattern: string) => {\n    const categoryDataNodes = categoryNodes.filter(node => {\n      const parentNode = getNode(node.parent);\n      return minimatch(parentNode.relativePath, pattern);\n    });\n\n    for (const dataNode of categoryDataNodes) {\n      const slug = getCategorySlug(dataNode);\n      const { title, icon, description, priority } = dataNode;\n\n      const nodeData = {\n        title,\n        icon,\n        description,\n        priority,\n        slug,\n        isTopLevel: !parent\n      };\n\n      const child: Node = {\n        ...nodeData,\n        id: createNodeId(`category-${slug}`),\n        parent: parent ? parent.id : (null as any), // tslint:disable-line\n        children: [],\n        internal: {\n          type: 'Category',\n          contentDigest: createContentDigest(nodeData),\n          owner: ''\n        }\n      };\n\n      await createNode(child);\n      const pageCount = await getPages(child);\n      reporter.info(`registered new category '${slug}' with ${pageCount} pages`);\n\n      if (parent) {\n        createParentChildLink({\n          parent,\n          child\n        });\n      }\n\n      await getCategories(child, `${slug}/*/*`);\n    }\n  };\n\n  await getCategories(null, '*/*');\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1585080350097
  },
  "{\"sourceRoot\":\"/home/xbtwo/prod/buy-mycrypto/gatsby\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/xbtwo/prod/buy-mycrypto\",\"filename\":\"/home/xbtwo/prod/buy-mycrypto/gatsby/create-pages.ts\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/xbtwo/prod/buy-mycrypto\",\"plugins\":[{\"key\":\"transform-typescript\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Identifier\":{\"enter\":[null]},\"RestElement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"ExportSpecifier\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"TSDeclareFunction\":{\"enter\":[null]},\"TSDeclareMethod\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"VariableDeclarator\":{\"enter\":[null]},\"TSIndexSignature\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null,null]},\"TSModuleDeclaration\":{\"enter\":[null]},\"TSInterfaceDeclaration\":{\"enter\":[null]},\"TSTypeAliasDeclaration\":{\"enter\":[null]},\"TSEnumDeclaration\":{\"enter\":[null]},\"TSImportEqualsDeclaration\":{\"enter\":[null]},\"TSExportAssignment\":{\"enter\":[null]},\"TSTypeAssertion\":{\"enter\":[null]},\"TSAsExpression\":{\"enter\":[null]},\"TSNonNullExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"TaggedTemplateExpression\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"isTSX\":false}}],\"presets\":[]}:7.8.4:development": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/xbtwo/prod/buy-mycrypto/gatsby",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/xbtwo/prod/buy-mycrypto",
      "filename": "/home/xbtwo/prod/buy-mycrypto/gatsby/create-pages.ts",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/xbtwo/prod/buy-mycrypto",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-typescript",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Identifier": {
              "enter": [
                null
              ]
            },
            "RestElement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportSpecifier": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "TSDeclareFunction": {
              "enter": [
                null
              ]
            },
            "TSDeclareMethod": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "TSIndexSignature": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "TSModuleDeclaration": {
              "enter": [
                null
              ]
            },
            "TSInterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "TSTypeAliasDeclaration": {
              "enter": [
                null
              ]
            },
            "TSEnumDeclaration": {
              "enter": [
                null
              ]
            },
            "TSImportEqualsDeclaration": {
              "enter": [
                null
              ]
            },
            "TSExportAssignment": {
              "enter": [
                null
              ]
            },
            "TSTypeAssertion": {
              "enter": [
                null
              ]
            },
            "TSAsExpression": {
              "enter": [
                null
              ]
            },
            "TSNonNullExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "JSXOpeningElement": {
              "enter": [
                null
              ]
            },
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "isTSX": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/xbtwo/prod/buy-mycrypto/gatsby/create-pages.ts",
        "plugins": [
          "typescript",
          "classProperties",
          "objectRestSpread"
        ]
      },
      "generatorOpts": {
        "filename": "/home/xbtwo/prod/buy-mycrypto/gatsby/create-pages.ts",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/xbtwo/prod/buy-mycrypto/gatsby",
        "sourceFileName": "create-pages.ts"
      }
    },
    "ast": null,
    "code": "/* tslint:disable */\nconst {\n  resolve\n} = require('path');\n\nconst {\n  readFileSync\n} = require('fs');\n\nconst {\n  safeLoad\n} = require('js-yaml');\n/* tslint:enable */\n\n\nconst REDIRECTS_FILE = resolve(__dirname, '../content/redirects.yml');\nconst CATEGORY_TEMPLATE = resolve(__dirname, '../src/templates/category.tsx');\nconst PAGE_TEMPLATE = resolve(__dirname, '../src/templates/page.tsx');\n\nmodule.exports = async ({\n  actions: {\n    createPage,\n    createRedirect\n  },\n  graphql,\n  reporter\n}) => {\n  /**\n   * Simple helper function to create pages from a GraphQL query. This assumes the node has a slug,\n   * which is used as `path` and `context`.\n   *\n   * @param {string} fieldName The GraphQL field name of the data\n   * @param {string} component Path to the React component to use for the page\n   * @returns {Promise<void>}\n   */\n  const createPages = async (fieldName, component) => {\n    const result = await graphql(`\n      query {\n        ${fieldName} {\n          edges {\n            node {\n              slug\n            }\n          }\n        }\n      }\n    `);\n\n    if (!result.data || result.errors) {\n      reporter.panicOnBuild('failed to fetch all content', result.errors);\n      return process.exit(1);\n    }\n\n    const data = result.data[fieldName];\n    data.edges.forEach(({\n      node: {\n        slug\n      }\n    }) => {\n      createPage({\n        path: slug,\n        component,\n        context: {\n          slug\n        }\n      });\n    });\n  };\n  /**\n   * Reads `content/redirects.yml` and registers all redirects.\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  const createRedirects = async () => {\n    let file;\n\n    try {\n      file = readFileSync(REDIRECTS_FILE, 'utf-8');\n    } catch (error) {\n      // Ignore error if file does not exist\n      if (error.code === 'ENOENT') {\n        reporter.warn('`content/redirects.yml` does not exist');\n        return process.exit(1);\n      }\n\n      reporter.panicOnBuild('failed to read `content/redirects.yml`', error);\n      return process.exit(1);\n    }\n\n    if (file) {\n      const document = safeLoad(file);\n      document.redirects.forEach(redirect => createRedirect({\n        fromPath: `/${redirect.from}`,\n        toPath: `/${redirect.to}`,\n        isPermanent: true,\n        redirectInBrowser: true\n      }));\n    }\n  };\n\n  await createPages('allCategory', CATEGORY_TEMPLATE);\n  await createPages('allPage', PAGE_TEMPLATE);\n  await createRedirects();\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZS1wYWdlcy50cyJdLCJuYW1lcyI6WyJyZXNvbHZlIiwicmVxdWlyZSIsInJlYWRGaWxlU3luYyIsInNhZmVMb2FkIiwiUkVESVJFQ1RTX0ZJTEUiLCJfX2Rpcm5hbWUiLCJDQVRFR09SWV9URU1QTEFURSIsIlBBR0VfVEVNUExBVEUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWN0aW9ucyIsImNyZWF0ZVBhZ2UiLCJjcmVhdGVSZWRpcmVjdCIsImdyYXBocWwiLCJyZXBvcnRlciIsImNyZWF0ZVBhZ2VzIiwiZmllbGROYW1lIiwiY29tcG9uZW50IiwicmVzdWx0IiwiZGF0YSIsImVycm9ycyIsInBhbmljT25CdWlsZCIsInByb2Nlc3MiLCJleGl0IiwiZWRnZXMiLCJmb3JFYWNoIiwibm9kZSIsInNsdWciLCJwYXRoIiwiY29udGV4dCIsImNyZWF0ZVJlZGlyZWN0cyIsImZpbGUiLCJlcnJvciIsImNvZGUiLCJ3YXJuIiwiZG9jdW1lbnQiLCJyZWRpcmVjdHMiLCJyZWRpcmVjdCIsImZyb21QYXRoIiwiZnJvbSIsInRvUGF0aCIsInRvIiwiaXNQZXJtYW5lbnQiLCJyZWRpcmVjdEluQnJvd3NlciJdLCJtYXBwaW5ncyI6IkFBRUE7QUFDQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBY0MsT0FBTyxDQUFDLE1BQUQsQ0FBM0I7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQW1CRCxPQUFPLENBQUMsSUFBRCxDQUFoQzs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBZUYsT0FBTyxDQUFDLFNBQUQsQ0FBNUI7QUFDQTs7O0FBRUEsTUFBTUcsY0FBYyxHQUFHSixPQUFPLENBQUNLLFNBQUQsRUFBWSwwQkFBWixDQUE5QjtBQUNBLE1BQU1DLGlCQUFpQixHQUFHTixPQUFPLENBQUNLLFNBQUQsRUFBWSwrQkFBWixDQUFqQztBQUNBLE1BQU1FLGFBQWEsR0FBR1AsT0FBTyxDQUFDSyxTQUFELEVBQVksMkJBQVosQ0FBN0I7O0FBbUJBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsT0FBTztBQUFFQyxFQUFBQSxPQUFPLEVBQUU7QUFBRUMsSUFBQUEsVUFBRjtBQUFjQyxJQUFBQTtBQUFkLEdBQVg7QUFBMkNDLEVBQUFBLE9BQTNDO0FBQW9EQyxFQUFBQTtBQUFwRCxDQUFQLEtBQTJGO0FBQzFHOzs7Ozs7OztBQVFBLFFBQU1DLFdBQVcsR0FBRyxPQUFPQyxTQUFQLEVBQTBCQyxTQUExQixLQUFnRDtBQUNsRSxVQUFNQyxNQUFNLEdBQUcsTUFBTUwsT0FBTyxDQUFhOztVQUVuQ0csU0FBVTs7Ozs7Ozs7S0FGWSxDQUE1Qjs7QUFZQSxRQUFJLENBQUNFLE1BQU0sQ0FBQ0MsSUFBUixJQUFnQkQsTUFBTSxDQUFDRSxNQUEzQixFQUFtQztBQUNqQ04sTUFBQUEsUUFBUSxDQUFDTyxZQUFULENBQXNCLDZCQUF0QixFQUFxREgsTUFBTSxDQUFDRSxNQUE1RDtBQUNBLGFBQU9FLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQWIsQ0FBUDtBQUNEOztBQUVELFVBQU1KLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFQLENBQVlILFNBQVosQ0FBYjtBQUNBRyxJQUFBQSxJQUFJLENBQUNLLEtBQUwsQ0FBV0MsT0FBWCxDQUFtQixDQUFDO0FBQUVDLE1BQUFBLElBQUksRUFBRTtBQUFFQyxRQUFBQTtBQUFGO0FBQVIsS0FBRCxLQUF3QjtBQUN6Q2hCLE1BQUFBLFVBQVUsQ0FBQztBQUNUaUIsUUFBQUEsSUFBSSxFQUFFRCxJQURHO0FBRVRWLFFBQUFBLFNBRlM7QUFHVFksUUFBQUEsT0FBTyxFQUFFO0FBQ1BGLFVBQUFBO0FBRE87QUFIQSxPQUFELENBQVY7QUFPRCxLQVJEO0FBU0QsR0E1QkQ7QUE4QkE7Ozs7Ozs7QUFLQSxRQUFNRyxlQUFlLEdBQUcsWUFBWTtBQUNsQyxRQUFJQyxJQUFKOztBQUNBLFFBQUk7QUFDRkEsTUFBQUEsSUFBSSxHQUFHN0IsWUFBWSxDQUFDRSxjQUFELEVBQWlCLE9BQWpCLENBQW5CO0FBQ0QsS0FGRCxDQUVFLE9BQU80QixLQUFQLEVBQWM7QUFDZDtBQUNBLFVBQUlBLEtBQUssQ0FBQ0MsSUFBTixLQUFlLFFBQW5CLEVBQTZCO0FBQzNCbkIsUUFBQUEsUUFBUSxDQUFDb0IsSUFBVCxDQUFjLHdDQUFkO0FBQ0EsZUFBT1osT0FBTyxDQUFDQyxJQUFSLENBQWEsQ0FBYixDQUFQO0FBQ0Q7O0FBRURULE1BQUFBLFFBQVEsQ0FBQ08sWUFBVCxDQUFzQix3Q0FBdEIsRUFBZ0VXLEtBQWhFO0FBQ0EsYUFBT1YsT0FBTyxDQUFDQyxJQUFSLENBQWEsQ0FBYixDQUFQO0FBQ0Q7O0FBRUQsUUFBSVEsSUFBSixFQUFVO0FBQ1IsWUFBTUksUUFBMkIsR0FBR2hDLFFBQVEsQ0FBQzRCLElBQUQsQ0FBNUM7QUFDQUksTUFBQUEsUUFBUSxDQUFDQyxTQUFULENBQW1CWCxPQUFuQixDQUEyQlksUUFBUSxJQUNqQ3pCLGNBQWMsQ0FBQztBQUNiMEIsUUFBQUEsUUFBUSxFQUFHLElBQUdELFFBQVEsQ0FBQ0UsSUFBSyxFQURmO0FBRWJDLFFBQUFBLE1BQU0sRUFBRyxJQUFHSCxRQUFRLENBQUNJLEVBQUcsRUFGWDtBQUdiQyxRQUFBQSxXQUFXLEVBQUUsSUFIQTtBQUliQyxRQUFBQSxpQkFBaUIsRUFBRTtBQUpOLE9BQUQsQ0FEaEI7QUFRRDtBQUNGLEdBMUJEOztBQTRCQSxRQUFNNUIsV0FBVyxDQUFDLGFBQUQsRUFBZ0JULGlCQUFoQixDQUFqQjtBQUNBLFFBQU1TLFdBQVcsQ0FBQyxTQUFELEVBQVlSLGFBQVosQ0FBakI7QUFDQSxRQUFNdUIsZUFBZSxFQUFyQjtBQUNELENBM0VEIiwic291cmNlUm9vdCI6Ii9ob21lL3hidHdvL3Byb2QvYnV5LW15Y3J5cHRvL2dhdHNieSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyZWF0ZVBhZ2VzQXJncyB9IGZyb20gJ2dhdHNieSc7XG5cbi8qIHRzbGludDpkaXNhYmxlICovXG5jb25zdCB7IHJlc29sdmUgfSA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgcmVhZEZpbGVTeW5jIH0gPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyBzYWZlTG9hZCB9ID0gcmVxdWlyZSgnanMteWFtbCcpO1xuLyogdHNsaW50OmVuYWJsZSAqL1xuXG5jb25zdCBSRURJUkVDVFNfRklMRSA9IHJlc29sdmUoX19kaXJuYW1lLCAnLi4vY29udGVudC9yZWRpcmVjdHMueW1sJyk7XG5jb25zdCBDQVRFR09SWV9URU1QTEFURSA9IHJlc29sdmUoX19kaXJuYW1lLCAnLi4vc3JjL3RlbXBsYXRlcy9jYXRlZ29yeS50c3gnKTtcbmNvbnN0IFBBR0VfVEVNUExBVEUgPSByZXNvbHZlKF9fZGlybmFtZSwgJy4uL3NyYy90ZW1wbGF0ZXMvcGFnZS50c3gnKTtcblxuaW50ZXJmYWNlIFF1ZXJ5RGF0YSB7XG4gIFtrZXk6IHN0cmluZ106IHtcbiAgICBlZGdlczoge1xuICAgICAgbm9kZToge1xuICAgICAgICBzbHVnOiBzdHJpbmc7XG4gICAgICB9O1xuICAgIH1bXTtcbiAgfTtcbn1cblxuaW50ZXJmYWNlIFJlZGlyZWN0c0RvY3VtZW50IHtcbiAgcmVkaXJlY3RzOiB7XG4gICAgZnJvbTogc3RyaW5nO1xuICAgIHRvOiBzdHJpbmc7XG4gIH1bXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoeyBhY3Rpb25zOiB7IGNyZWF0ZVBhZ2UsIGNyZWF0ZVJlZGlyZWN0IH0sIGdyYXBocWwsIHJlcG9ydGVyIH06IENyZWF0ZVBhZ2VzQXJncykgPT4ge1xuICAvKipcbiAgICogU2ltcGxlIGhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgcGFnZXMgZnJvbSBhIEdyYXBoUUwgcXVlcnkuIFRoaXMgYXNzdW1lcyB0aGUgbm9kZSBoYXMgYSBzbHVnLFxuICAgKiB3aGljaCBpcyB1c2VkIGFzIGBwYXRoYCBhbmQgYGNvbnRleHRgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmllbGROYW1lIFRoZSBHcmFwaFFMIGZpZWxkIG5hbWUgb2YgdGhlIGRhdGFcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudCBQYXRoIHRvIHRoZSBSZWFjdCBjb21wb25lbnQgdG8gdXNlIGZvciB0aGUgcGFnZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIGNvbnN0IGNyZWF0ZVBhZ2VzID0gYXN5bmMgKGZpZWxkTmFtZTogc3RyaW5nLCBjb21wb25lbnQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdyYXBocWw8UXVlcnlEYXRhPihgXG4gICAgICBxdWVyeSB7XG4gICAgICAgICR7ZmllbGROYW1lfSB7XG4gICAgICAgICAgZWRnZXMge1xuICAgICAgICAgICAgbm9kZSB7XG4gICAgICAgICAgICAgIHNsdWdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgKTtcblxuICAgIGlmICghcmVzdWx0LmRhdGEgfHwgcmVzdWx0LmVycm9ycykge1xuICAgICAgcmVwb3J0ZXIucGFuaWNPbkJ1aWxkKCdmYWlsZWQgdG8gZmV0Y2ggYWxsIGNvbnRlbnQnLCByZXN1bHQuZXJyb3JzKTtcbiAgICAgIHJldHVybiBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IHJlc3VsdC5kYXRhW2ZpZWxkTmFtZV07XG4gICAgZGF0YS5lZGdlcy5mb3JFYWNoKCh7IG5vZGU6IHsgc2x1ZyB9IH0pID0+IHtcbiAgICAgIGNyZWF0ZVBhZ2Uoe1xuICAgICAgICBwYXRoOiBzbHVnLFxuICAgICAgICBjb21wb25lbnQsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICBzbHVnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZWFkcyBgY29udGVudC9yZWRpcmVjdHMueW1sYCBhbmQgcmVnaXN0ZXJzIGFsbCByZWRpcmVjdHMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgY29uc3QgY3JlYXRlUmVkaXJlY3RzID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCBmaWxlO1xuICAgIHRyeSB7XG4gICAgICBmaWxlID0gcmVhZEZpbGVTeW5jKFJFRElSRUNUU19GSUxFLCAndXRmLTgnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWdub3JlIGVycm9yIGlmIGZpbGUgZG9lcyBub3QgZXhpc3RcbiAgICAgIGlmIChlcnJvci5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgICByZXBvcnRlci53YXJuKCdgY29udGVudC9yZWRpcmVjdHMueW1sYCBkb2VzIG5vdCBleGlzdCcpO1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgfVxuXG4gICAgICByZXBvcnRlci5wYW5pY09uQnVpbGQoJ2ZhaWxlZCB0byByZWFkIGBjb250ZW50L3JlZGlyZWN0cy55bWxgJywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHByb2Nlc3MuZXhpdCgxKTtcbiAgICB9XG5cbiAgICBpZiAoZmlsZSkge1xuICAgICAgY29uc3QgZG9jdW1lbnQ6IFJlZGlyZWN0c0RvY3VtZW50ID0gc2FmZUxvYWQoZmlsZSk7XG4gICAgICBkb2N1bWVudC5yZWRpcmVjdHMuZm9yRWFjaChyZWRpcmVjdCA9PlxuICAgICAgICBjcmVhdGVSZWRpcmVjdCh7XG4gICAgICAgICAgZnJvbVBhdGg6IGAvJHtyZWRpcmVjdC5mcm9tfWAsXG4gICAgICAgICAgdG9QYXRoOiBgLyR7cmVkaXJlY3QudG99YCxcbiAgICAgICAgICBpc1Blcm1hbmVudDogdHJ1ZSxcbiAgICAgICAgICByZWRpcmVjdEluQnJvd3NlcjogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgYXdhaXQgY3JlYXRlUGFnZXMoJ2FsbENhdGVnb3J5JywgQ0FURUdPUllfVEVNUExBVEUpO1xuICBhd2FpdCBjcmVhdGVQYWdlcygnYWxsUGFnZScsIFBBR0VfVEVNUExBVEUpO1xuICBhd2FpdCBjcmVhdGVSZWRpcmVjdHMoKTtcbn07XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "create-pages.ts"
      ],
      "names": [
        "resolve",
        "require",
        "readFileSync",
        "safeLoad",
        "REDIRECTS_FILE",
        "__dirname",
        "CATEGORY_TEMPLATE",
        "PAGE_TEMPLATE",
        "module",
        "exports",
        "actions",
        "createPage",
        "createRedirect",
        "graphql",
        "reporter",
        "createPages",
        "fieldName",
        "component",
        "result",
        "data",
        "errors",
        "panicOnBuild",
        "process",
        "exit",
        "edges",
        "forEach",
        "node",
        "slug",
        "path",
        "context",
        "createRedirects",
        "file",
        "error",
        "code",
        "warn",
        "document",
        "redirects",
        "redirect",
        "fromPath",
        "from",
        "toPath",
        "to",
        "isPermanent",
        "redirectInBrowser"
      ],
      "mappings": "AAEA;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,OAAO,CAAC,MAAD,CAA3B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAmBD,OAAO,CAAC,IAAD,CAAhC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAeF,OAAO,CAAC,SAAD,CAA5B;AACA;;;AAEA,MAAMG,cAAc,GAAGJ,OAAO,CAACK,SAAD,EAAY,0BAAZ,CAA9B;AACA,MAAMC,iBAAiB,GAAGN,OAAO,CAACK,SAAD,EAAY,+BAAZ,CAAjC;AACA,MAAME,aAAa,GAAGP,OAAO,CAACK,SAAD,EAAY,2BAAZ,CAA7B;;AAmBAG,MAAM,CAACC,OAAP,GAAiB,OAAO;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAX;AAA2CC,EAAAA,OAA3C;AAAoDC,EAAAA;AAApD,CAAP,KAA2F;AAC1G;;;;;;;;AAQA,QAAMC,WAAW,GAAG,OAAOC,SAAP,EAA0BC,SAA1B,KAAgD;AAClE,UAAMC,MAAM,GAAG,MAAML,OAAO,CAAa;;UAEnCG,SAAU;;;;;;;;KAFY,CAA5B;;AAYA,QAAI,CAACE,MAAM,CAACC,IAAR,IAAgBD,MAAM,CAACE,MAA3B,EAAmC;AACjCN,MAAAA,QAAQ,CAACO,YAAT,CAAsB,6BAAtB,EAAqDH,MAAM,CAACE,MAA5D;AACA,aAAOE,OAAO,CAACC,IAAR,CAAa,CAAb,CAAP;AACD;;AAED,UAAMJ,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYH,SAAZ,CAAb;AACAG,IAAAA,IAAI,CAACK,KAAL,CAAWC,OAAX,CAAmB,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA;AAAF;AAAR,KAAD,KAAwB;AACzChB,MAAAA,UAAU,CAAC;AACTiB,QAAAA,IAAI,EAAED,IADG;AAETV,QAAAA,SAFS;AAGTY,QAAAA,OAAO,EAAE;AACPF,UAAAA;AADO;AAHA,OAAD,CAAV;AAOD,KARD;AASD,GA5BD;AA8BA;;;;;;;AAKA,QAAMG,eAAe,GAAG,YAAY;AAClC,QAAIC,IAAJ;;AACA,QAAI;AACFA,MAAAA,IAAI,GAAG7B,YAAY,CAACE,cAAD,EAAiB,OAAjB,CAAnB;AACD,KAFD,CAEE,OAAO4B,KAAP,EAAc;AACd;AACA,UAAIA,KAAK,CAACC,IAAN,KAAe,QAAnB,EAA6B;AAC3BnB,QAAAA,QAAQ,CAACoB,IAAT,CAAc,wCAAd;AACA,eAAOZ,OAAO,CAACC,IAAR,CAAa,CAAb,CAAP;AACD;;AAEDT,MAAAA,QAAQ,CAACO,YAAT,CAAsB,wCAAtB,EAAgEW,KAAhE;AACA,aAAOV,OAAO,CAACC,IAAR,CAAa,CAAb,CAAP;AACD;;AAED,QAAIQ,IAAJ,EAAU;AACR,YAAMI,QAA2B,GAAGhC,QAAQ,CAAC4B,IAAD,CAA5C;AACAI,MAAAA,QAAQ,CAACC,SAAT,CAAmBX,OAAnB,CAA2BY,QAAQ,IACjCzB,cAAc,CAAC;AACb0B,QAAAA,QAAQ,EAAG,IAAGD,QAAQ,CAACE,IAAK,EADf;AAEbC,QAAAA,MAAM,EAAG,IAAGH,QAAQ,CAACI,EAAG,EAFX;AAGbC,QAAAA,WAAW,EAAE,IAHA;AAIbC,QAAAA,iBAAiB,EAAE;AAJN,OAAD,CADhB;AAQD;AACF,GA1BD;;AA4BA,QAAM5B,WAAW,CAAC,aAAD,EAAgBT,iBAAhB,CAAjB;AACA,QAAMS,WAAW,CAAC,SAAD,EAAYR,aAAZ,CAAjB;AACA,QAAMuB,eAAe,EAArB;AACD,CA3ED",
      "sourceRoot": "/home/xbtwo/prod/buy-mycrypto/gatsby",
      "sourcesContent": [
        "import { CreatePagesArgs } from 'gatsby';\n\n/* tslint:disable */\nconst { resolve } = require('path');\nconst { readFileSync } = require('fs');\nconst { safeLoad } = require('js-yaml');\n/* tslint:enable */\n\nconst REDIRECTS_FILE = resolve(__dirname, '../content/redirects.yml');\nconst CATEGORY_TEMPLATE = resolve(__dirname, '../src/templates/category.tsx');\nconst PAGE_TEMPLATE = resolve(__dirname, '../src/templates/page.tsx');\n\ninterface QueryData {\n  [key: string]: {\n    edges: {\n      node: {\n        slug: string;\n      };\n    }[];\n  };\n}\n\ninterface RedirectsDocument {\n  redirects: {\n    from: string;\n    to: string;\n  }[];\n}\n\nmodule.exports = async ({ actions: { createPage, createRedirect }, graphql, reporter }: CreatePagesArgs) => {\n  /**\n   * Simple helper function to create pages from a GraphQL query. This assumes the node has a slug,\n   * which is used as `path` and `context`.\n   *\n   * @param {string} fieldName The GraphQL field name of the data\n   * @param {string} component Path to the React component to use for the page\n   * @returns {Promise<void>}\n   */\n  const createPages = async (fieldName: string, component: string) => {\n    const result = await graphql<QueryData>(`\n      query {\n        ${fieldName} {\n          edges {\n            node {\n              slug\n            }\n          }\n        }\n      }\n    `);\n\n    if (!result.data || result.errors) {\n      reporter.panicOnBuild('failed to fetch all content', result.errors);\n      return process.exit(1);\n    }\n\n    const data = result.data[fieldName];\n    data.edges.forEach(({ node: { slug } }) => {\n      createPage({\n        path: slug,\n        component,\n        context: {\n          slug\n        }\n      });\n    });\n  };\n\n  /**\n   * Reads `content/redirects.yml` and registers all redirects.\n   *\n   * @returns {Promise<void>}\n   */\n  const createRedirects = async () => {\n    let file;\n    try {\n      file = readFileSync(REDIRECTS_FILE, 'utf-8');\n    } catch (error) {\n      // Ignore error if file does not exist\n      if (error.code === 'ENOENT') {\n        reporter.warn('`content/redirects.yml` does not exist');\n        return process.exit(1);\n      }\n\n      reporter.panicOnBuild('failed to read `content/redirects.yml`', error);\n      return process.exit(1);\n    }\n\n    if (file) {\n      const document: RedirectsDocument = safeLoad(file);\n      document.redirects.forEach(redirect =>\n        createRedirect({\n          fromPath: `/${redirect.from}`,\n          toPath: `/${redirect.to}`,\n          isPermanent: true,\n          redirectInBrowser: true\n        })\n      );\n    }\n  };\n\n  await createPages('allCategory', CATEGORY_TEMPLATE);\n  await createPages('allPage', PAGE_TEMPLATE);\n  await createRedirects();\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1585080350097
  }
}